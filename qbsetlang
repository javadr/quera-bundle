#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Sun Feb 13, 2022
# Config Class
# Sat Feb 12, 2022
# Save the chosen languages in `config.yaml`
# get the languages list automatically + check for languages' list update
# Mon Jan 31, 2022
# time-limit field should contain a number which is multiple of 50
# San Jan 22, 2022
# In compliance with the latest version of Selenium since find_element_by_id is deprecated now.
# Sat 6 Nov 2021
# output the problem title as well as the url
# Sun 17 Oct 2021
# bug fix with site update.
# Fri 18 Dec 2020
#
# Setting default languages for programming problems of quera.ir used as assignments.

import cryptocode
import os
from pathlib import Path
import parser
from parser import parse_args
from rich import print
from rich.padding import Padding
import sys
from selenium.webdriver import Firefox
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium.common import exceptions
from tkinter import *
import yaml

class Config(object):
    config_file = 'config.yaml'

    def __new__(self, key, value):
        return Config.set(key, value)

    @staticmethod
    def exist():
        return Path(Config.config_file).is_file()

    @staticmethod
    def set(key, value):
        data = Config.get() if Config.exist() else {key: value}
        with open(Config.config_file, "w") as stream:
            try:
                data[key] = value
                yaml.dump(data, stream)
            except yaml.YAMLError as exc:
                print(exc)

    @staticmethod
    def get(key=None):
        with open(Config.config_file, "r") as stream:
            try:
                data = yaml.safe_load(stream)
                return data[key] if key else data
            except yaml.YAMLError as exc:
                print(exc)
    
    def __class_getitem__(cls, key=None): #from python 3.7
        return Config.get(key)

class LangWindow:
    def __init__(self, items, config, nogui=False):
        self.items = list(items)
        self.config = config
        self.gui = not nogui
        if nogui: 
            return 
        self.window = Tk()
        self.window.title('Choose the desired languages')
        def destroy(): pass 
        self.window.protocol("WM_DELETE_WINDOW", destroy)

    def get(self):
        if self.gui:
            return self._gui_get()
        else:
            return self._nogui_get()

    def _gui_get(self):
        if not self.config and Config.exist():
            try:
                return Config['Judge']
            except KeyError:    
                pass
        def _state(): return map((lambda var: var.get()), vars)
        def allstates(): 
            if any(list(_state())):
                if self.config or not Config.exist():
                    Config.set('Judge', [ self.items[i] for i,j in enumerate(list(_state())) if j ])
                self.window.quit()
                self.window.destroy()
        vars = []
        row, width = -1, max([len(_) for _ in self.items])
        for i, item in enumerate(self.items):
            if i%3==0: row += 1 
            var = BooleanVar()
            chk = Checkbutton(self.window, text=item, variable=var, relief=RIDGE, 
                                width=width, anchor=W).grid(row=row,column=i%3)
            vars.append(var)
        Button(self.window, text='Set', command=allstates).grid(column=1)
        self.window.mainloop()
        return [ self.items[i] for i,j in enumerate(list(_state())) if j ]

    def _nogui_get(self):
        if not self.config and Config.exist():
            try:
                return Config['Judge']
            except KeyError:
                pass
        clear_screen()
        include_list = set()  # saves the list of languages to be included
        getRange = lambda x: set(range(int(x), int(x) + 1) if len(x.split('-')) == 1 
                        else range(int(x.split('-')[0]), int(x.split('-')[1]) + 1))
        print('\n'.join(f"{i:2}: {lang}" for i,lang in enumerate(self.items,1)))
        print(
            '==> Press the Enter key to select all languages,',
            'Languages(s) to include: (e.g.: "1 2 3", "1-3", "^4"),',
            sep='\n', end=' ' 
        )
        lineInput = input("==> ").strip().lower()
        exc = set(lineInput.strip().lower().split())
        if exc == set():
            Config.set('Judge', self.items)
            return  self.items # there would be no exclusion
        for item in exc:
            if item[0]=='^': include_list.update(getRange(item[1:]))
        if '^' in lineInput:
                include_list = set(range(1, len(self.items) + 1)).difference(include_list)
        for item in exc: 
            if item[0]!='^': include_list.update(getRange(item))
        print(f"Default languages have been set to \"{', '.join([self.items[i-1] for i in include_list])}\"")
        Config.set('Judge', [self.items[i-1] for i in include_list])
        return [self.items[i] for i in include_list]


class Password:
    @staticmethod
    def encrypt(password):
        return cryptocode.encrypt(password,args.key)

    @staticmethod
    def decrypt(encoded):
        return cryptocode.decrypt(encoded, args.key)

class Assignment():
    def __init__(self, args):
        self.args = args
        if not self.args.assignment_num.isdigit(): sys.exit()
        self.asg_url = f'https://quera.ir/course/assignments/{self.args.assignment_num}/problems'
        self.langs = []
        self.Jlang2id = dict()
        self._setClang = False

    def connect(self):
        no_userpass = False
        if self.args.username:
            Config('username', self.args.username)
            username = self.args.username
        elif Config.exist():
            try:
                username = Config['username']
            except KeyError:
                no_userpass = True
        if self.args.password:
            password = Password.encrypt(self.args.password)
            Config('password', password)
            password = self.args.password
        elif Config.exist():
            try:
                password = Password.decrypt(Config['password'])
            except KeyError:
                no_userpass = True
        if no_userpass:
            fatal_error('No user/pass error!')
        self.driver = Firefox()
        self.driver.get(self.asg_url)
        self.driver.find_element(By.NAME, 'login').send_keys(username)
        self.driver.find_element(By.NAME, 'password').send_keys(password)
        self.driver.find_element(By.CSS_SELECTOR,
                            'button.ui.fluid.large.primary.submit.button').click()  #send_keys(Keys.RETURN)
    def _getClang(self):
        if self._setClang: return 
        self._setClang = True
        self.langs = LangWindow(self.Jlang2id.keys(), self.args.config, self.args.nogui).get()

    def setlang(self):
        self.connect()
        self.driver.get(self.asg_url)
        elements = self.driver.find_elements(By.CLASS_NAME, 'problem_menu_item')
        probUrls = [(item.get_attribute("href").replace('problems',
                                                        'edit_problem'),
                    item.text.translate(str.maketrans('', '', '۰۱۲۳۴۵۶۷۸۹\n')))
                    for item in elements]
        radio_check = lambda x: self.driver.find_element(By.CSS_SELECTOR,
                           f"input[type='radio'][value='{x}']").is_selected()
        for url, item in probUrls:
            self.driver.get(url)
            elem = self.driver.find_element(By.ID, 'set-all-selected')
            elem.click() # select all and then
            elem.click() # deselect all
            if not self.Jlang2id:
                ids = [_.get_attribute("id") for _ in self.driver.find_elements(
                    By.CSS_SELECTOR,"table[class='ui unstackable collapsing center aligned table'] tbody div[class='ui checkbox select-filetype qu-checkbox'] input")]
                names = [_.get_attribute('data-name') for _ in self.driver.find_elements(
                    By.CSS_SELECTOR,"table[class='ui unstackable collapsing center aligned table'] tbody td[class='filetype-name']")]
                self.Jlang2id = dict(zip(names, ids))
            if radio_check('J'): # Judge
                self._getClang()
                for lang in self.langs:
                    try: # sometimes there will be an update in the list, e.g. Python 3.7 to Pyhton 3.8
                        self.driver.find_element(By.ID, f"{self.Jlang2id[lang]}").send_keys(Keys.SPACE)
                    except:
                        bs, be = "[black][bold]", "[/bold][/black]"
                        print(Padding(f"{' Failure '.center(60,'#')}\n"+\
                        f"## The {bs}{lang}{be} is not in the quera list anymore,\n"+\
                        f"## run the script with '{bs}--config{be}' switch.\n"+\
                        f"{'#'*60}", (1,2), style='on red', expand=False))
            elif radio_check('C'): # Compile
                pass
            elif radio_check('U'): # Upload
                pass
            # The following doesnot work yet. So, the code use `save_and_continute` and `cancel` buttons instead.
            #ok = driver.find_element_by_css_selector("button.ui.green.button")
            for elem in self.driver.find_elements(By.CSS_SELECTOR,"input[type='number'][class='time-limit']"): 
                time_limit = int(elem.get_attribute('value'))
                if time_limit%100 not in (50,0):
                    elem.clear()
                    elem.send_keys(str(int(round(time_limit//100,1)*100)))
            self.driver.find_element(By.NAME, 'save_and_continue_editing').click()
            self.driver.find_element(By.CSS_SELECTOR, "a.ui.teal.button").click()
            print(f"\r[{item}]({url.replace('edit_problem', 'problems')})")

    def dc(self):
        if hasattr(self, 'driver'):
            self.driver.close()            

def clear_screen():
    # for mac and linux(here, os.name is 'posix')
    if os.name == 'posix': 
        _ = os.system('clear')
    else: # for windows platfrom
        _ = os.system('cls')

def fatal_error(message):
    print(f">>> [blink][red][bold]{message}[bold][/red][/blink] <<<")
    args.parser.print_usage()
    sys.exit(1)

def main():
    """
    Main entry point for execution.
    """
    global args
    args = parse_args()
    asg = Assignment(args)

    try:
        asg.setlang()
        print(" DONE! ".center(80, '='))
    except exceptions.WebDriverException as exp:
        print(exp.msg)
        sys.exit(1)
    finally:
        asg.dc()
    
if __name__ == '__main__':
    main()
