#!/usr/bin/env python3

import sys
from pathlib import Path
import pandas as pd
import numpy as np
from ordered_set import OrderedSet
from matplotlib import pyplot as plt
from rich import print, box
from rich.console import Console
from rich.table import Table

class Tabular:

    def __init__(self, data: list, header=True, double=True):
        self.data = data
        self.table = None
        self._make_table(header, double)

    def _make_table(self, header: bool, double: bool):
        self.table = Table(show_header=header, header_style='bold', 
                        row_styles=["none", "dim"], box=box.DOUBLE,)
        doub = 2 if double else 1
        for col,style,justify in zip( ('Student ID#', 'Grade')*doub, 
                ('bold #6baed6', 'reverse bold white')*doub, ('center', 'center')*doub ):
            self.table.add_column(f"[{style}]{col}", style=style, no_wrap=False, justify=justify)
        if double:
            if len(self.data)%2: self.data.append(('',''))
            self.data = zip(self.data[::2], self.data[1::2])
            for (col1, col2), (col3, col4) in self.data:
                self.table.add_row( *(col1, col2, col3, col4) )
        else:
            for col1, col2 in self.data:
                self.table.add_row( *(col1, col2) )

    def show(self):
        Console().print()
        Console().print(self.table)


class Grade:

    colors = ['#f7fbff', '#deebf7', '#c6dbef',
            '#9ecae1', '#6baed6', '#4292c6',
            '#2171b5','#08519c','#08306b'][::-1]

    def __init__(self,):
        self.files = list(sorted(Path('.').glob('*xlsx')))
        assert self.files != [], 'There is no xlsx file to be processed.!'
        self.Ys = [] # grade of each assignment
        self.df = None # dataframe of all assignment and their grades in detail

    def get_marks(self, file: Path) -> pd.DataFrame:
        udesc, uid, jgrade,lgrade = 'مشخصات کاربر',  'شناسه کاربری', 'نمره داوری با تاخیر', 'نمره استاد با تاخیر'
        df = pd.read_excel(file, header=[0, 1], dtype={(udesc, uid): str})
        # making the proper header for final dataframe
        major_header = list(OrderedSet([f for f, s in df.columns])) # questions' titles
        minor_header = list(OrderedSet([s for f, s in df.columns])) # marks' descriptions
        major_header_copy = [major_header[0]]
        for c in major_header[1:]: major_header_copy.extend([c, c])
        major_header = major_header_copy
        minor_header = [uid] + [jgrade, lgrade] * (len(major_header) - 1)
        # headers of final dataframe
        headers = pd.MultiIndex.from_tuples(list(zip(major_header, minor_header)))
        ndf = df[headers]
        ndf.columns = [ col.replace('سوال ', '') for col in minor_header[:1] + major_header[1:] ]
        ndf = ndf.replace('None', np.inf).fillna(0)
        ndf = ndf.drop(ndf.loc[ndf[ndf.columns[0]] == 0].index) # drop the instructor and his/her TAs from the list
        ndf[ndf.columns[0]] = ndf[ndf.columns[0]].astype('str')
        for i in range(1, len(headers)):
            ndf[ndf.columns[i]] = ndf[ndf.columns[i]].astype('float')
        for i in range(1, len(ndf.columns), 2):
            ndf[ndf.columns[i]] = ndf[[ndf.columns[i], ndf.columns[i+1]]].agg(min, axis=1)
        ndf = ndf.iloc[:, [j for j, c in enumerate(ndf.columns) if j not in range(2,len(headers), 2)]]
        ndf = ndf.set_index(ndf.columns[0])
        return ndf.groupby(level=0).sum() # this makes all returned dataframe consistent, in the plot output

    def plot_marks(self, title=''):
        fig, ax = plt.subplots()
        # https://stackoverflow.com/questions/44863375/how-to-change-spacing-between-ticks-in-matplotlib
        scale = [.6, .5, .4, .3][min(len(self.Ys[0])//20, 2)]
        plt.gcf().set_size_inches(len(self.Ys[0])*scale, plt.gcf().get_size_inches()[1])
        for i,y in enumerate(self.Ys[:-1]):
            ax.plot(y.index, y, color=Grade.colors[i%9])
        ax.plot(self.Ys[-1].index, self.Ys[-1], marker='o', color='r')
        for i, txt in enumerate(self.Ys[-1]):
            ax.annotate(text=txt, xy=(i + .1, txt))
        ax.set_xticks(self.Ys[-1].index, self.Ys[-1].index, rotation=55, rotation_mode='anchor', ha='right')
        ax.set_title(title)
        fig.savefig('scores.png', bbox_inches='tight')

    def accumulate(self):
        """
            Accumulates all marks
        """
        df = self.get_marks(self.files[0])
        for file in self.files[1:]:
            ndf = self.get_marks(file)
            self.Ys.append( df.sum(axis=1).astype('uint32') )
            df = pd.concat([df, ndf], axis=1)
        df['sum'] = df.sum(axis=1).astype('uint32')
        self.Ys.append(df['sum'])
        self.df = df 

    def csv_plot(self):
        # csv and marks plot
        self.df.to_csv('total.csv')
        self.plot_marks(title=f"Cumulative Plot for {len(self.files)} Assignment{'s'*min(len(self.files)-1,1)} with {len(self.df.columns)-1} Question{'s'*min(len(self.df.columns)-2,1)} in Total")
        # histogram of marks
        fig = plt.figure()
        self.df['sum'].hist()
        fig.savefig('hist.png', bbox_inches='tight')
        # outputing the average with list of all students with their total marks
        Tabular( [ (f"{i}", f"{j}") for i,j in sorted(list(zip(self.df.index, self.df['sum'])))] ).show()
        Tabular( [("Average Score", f"{self.df['sum'].sum()//len(self.df)} [{len(self.files)} Assignment(s) with {len(self.df.columns)-1} Question(s)]"),] 
                        , header=False, double=False).show()

    def compute(self):
        self.accumulate()
        self.csv_plot()


g = Grade()
g.compute()